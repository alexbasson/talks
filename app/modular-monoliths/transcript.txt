I am here to talk about "modular monoliths for maximum malleability and microservice magic". The reason that I struggled with this was that I knew that people were going to look at it and be like "ah, modular monoliths versus microservices, the showdown of the century!" and that's really not what this talk is supposed to be.

this talk is not about best practices. I've given talks before about how I don't really like the concept of best practices. I feel like a lot of times when we talk about best practices, the things that best practices actually are is they're just techniques that are a good a idea more often than not. But when we talk about them as best practices it kind of encourages people to short cut the whole decision-making process and just be like "oh, we have to be using best practices, what's the alternative? second-best practices? let's not use those" and so this isn't about that. this isn't about best practices for doing anything.

What this thing is, this talk is going to be about math. This is going to be about weighing costs versus benefits and ways that you can get more benefits for less cost in certain situations and some ways that folks might not have been familiar with or been aware of. (I'm going to occasionally check the chat just to make sure that no one is telling me that my audio has cut out.) So that's what this is all about.

And to get started to talk about sort of the particular problem space in which we're going to be doing this calculus, I want to talk about the Emerald City. The Emerald City is something that we have all heard about. We've heard the stories and the legends, we're all excited to get there, it sounds like a lovely place to live. The Emerald City consists of approximately 10 bajilion microservices. All these microservices are perfectly decoupled, they're all independently deployable, they're being worked on by all these different teams who are all autonomous and empowered and they're coreographed and they're using service discovery and they're highly available, they have histrix and circuit breakers, all of this. We've heard about all of them, there are many many conference talks that have told us this story, and it sounds delightful. We're very excited to get there, we're walking along the yellow brick road to arrive in this place.

And yet...

For as magical as the Emerald City sounds, the place where we are doesn't feel as nice? The place where we are is kind of rough. We have maybe right now, say, 5 microservices. And while you can maybe see the brilliant Emerald City on the horizon, what's happening to you right now is that you're dealing with a bug that has just come up in the backlog. Some kind of weird interaction between different services going on, and you're not really sure what's happening. You feel like you're going to have to tinker with it, which means you're going to have to start up all the services locally on your workstation, so you can try to see what weird interaction is causing this problem, and that's going to be a bit of a hassle, especially if you're running on an underpowered virtual desktop that struggles to run all five of those Spring Boot apps at the same time. Once you're done with that, you're excited to get to work on some features; it might be a little bit because the next few things on your backlog aren't actually features, they're things like figuring out the security that you need to put in front of the APIs on these various microservices, and you need to, like, fix up a pipeline for the new microservice that has just been pushed, and various kinds of this. But there's some features after that, that you're excited to get to, you're just going to have to remember which repo you're supposed to go to, there's like seven of them, and you need to track down where the code is that you're looking for. So this is an experience that folks have maybe experienced, where in route to the great and glorious microservice metropolis, the way there actually feels really expensive.

4:15

Just the everyday ergonomics of development gets really hard when you have a lot of different pieces of your distributed system to work with. And of course, if you voice these concerns to certain types of folks, if you go before the Great and Powerful Oz and say "ah, this is kind of hard", what the Great and Powerful Oz might tell you is that you should Get Good, you're Doing It Wrong, what, you have to run all of your different microservices locally in order to see... that just means that they're coupled, you were supposed to decouple your microservices, don't have coupled microservices, you shouldn't have to run more than one at a time! Or if you're talking about having to set up all of your service discovery and how that's holding you back from doing other features, the Great and Powerful Oz might say, "Eat your vegetables, mortal! Of course you want service discovery, if you don't have service discovery it's very bad!"

And like, ok, but I'm not a wizard and I didn't, like, make my services wrong on purpose. I thought that I had drawn the boundaries in the right way or the architects that work with us, they thought that they had put the boundaries in the right spot. We didn't think we were going to have to run all these different services at the same time to debug problems. But here we have arrived and here we are, trying to figure this out, and now it's really expensive and it's really great.

So the question is: As great as the future sounds, does the road we take to get there have to hurt this bad?

5:37

